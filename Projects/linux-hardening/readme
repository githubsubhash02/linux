# Linux Hardening Automation

This is a comprehensive solution for auditing and hardening Linux systems based on security best practices such as the CIS benchmarks. It includes automated scripts and Ansible roles to enforce secure configurations, generate audit reports, and apply rollback if necessary.

---

## 📂 Project Structure

```
linux-hardening/
├── README.md
├── ansible/
│   ├── playbook.yml
│   ├── roles/
│   │   ├── common/
│   │   ├── ssh_hardening/
│   │   ├── firewall/
│   │   ├── kernel_hardening/
│   │   └── audit/
├── scripts/
│   ├── audit.sh
│   └── rollback.sh
├── logs/
│   └── audit_report.txt (Generated by audit.sh)
├── inventory/
│   └── hosts.ini
└── LICENSE
```

---

## 🧰 Features

- Disable root login over SSH
- Enforce SSH key-based authentication
- Set strict password policies
- Configure firewall (UFW or Firewalld)
- Apply kernel-level hardening (sysctl)
- Disable unnecessary services
- World-writable and SUID file checks
- Full audit logging

---

## 🚀 Getting Started

### Prerequisites
- A Linux machine (Ubuntu/CentOS/RHEL)
- Root or sudo access
- Ansible installed (`sudo apt/yum install ansible`)

### Clone the Repository
```bash
git clone https://github.com/githubsubhash02/linux.git
cd linux-hardening
```

### Run Audit Script
```bash
sudo bash scripts/audit.sh
```
This generates `logs/audit_report.txt` with findings.

### Apply Hardening via Ansible
```bash
ansible-playbook -i inventory/hosts.ini ansible/playbook.yml --ask-become-pass
```

### (Optional) Rollback
Rollback script will reverse key changes.

---

## 🔐 Sample Audit Checks

| Check                    | Description                                |
|-------------------------|--------------------------------------------|
| World-writable files    | Lists risky files open to all writes       |
| SUID/SGID binaries      | Lists binaries with elevated permissions   |
| SSH hardening           | Validates root login & password settings   |
| Firewall check          | Verifies UFW/Firewalld status              |
| Password policy         | Reads values from `/etc/login.defs`       |

---

## 🛠 Roles Overview

- `common`: Disable unwanted services, sync time
- `ssh_hardening`: Secure SSH configurations
- `firewall`: Restrict network access
- `kernel_hardening`: Apply system-wide sysctl settings
- `audit`: Automated checks and validations

---

## 📄 License
MIT License

---

## 📬 Contact
Created by [Subhash Chandra]. Contributions are welcome!
